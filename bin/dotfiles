#!/usr/bin/env bash

# Load Spinner
source $(dirname "$0")/spinner.sh

# Color codes - solo los que se usan
NC='\033[0m'
GREEN='\033[00;32m'
RED='\033[00;31m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
OVERWRITE='\e[1A\e[K'

# Emoji codes - solo los que se usan
ARROW="${SEA}\xE2\x96\xB6${NC}"
XMARK="${RED}\xE2\x9C\x96${NC}"

# Logs
DOTFILESLOG="$HOME/.dotfiles.log"

# Mensaje de bienvenida
echo -e "${ARROW} ${CYAN}Instalando dotfiles de Ivan Lynch...${NC}"
echo "Este script sobrescribirá tu configuración actual. Se realizará un backup en ~/.dotfiles-backup"
echo ""

# Función para mostrar tareas
function task {
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    fi
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# Ejecuta comandos con verificación de errores
function cmd {
    if ! [[ -f $DOTFILESLOG ]]; then
        touch $DOTFILESLOG
    fi
    > $DOTFILESLOG
    if eval "$1" 1> /dev/null 2> $DOTFILESLOG; then
        return 0
    fi
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
    while read line; do
        printf "      ${line}\n"
    done < $DOTFILESLOG
    printf "\n"
    rm $DOTFILESLOG
    exit 1
}

function clearTask {
    TASK=""
}

function taskDone {
    printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    clearTask
}

set -e

# Paths
DOTFILESDIR="$HOME/.dotfiles"

# Verificación del sistema
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "Hello Mac"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    task "Installing Ansible"; spinner
        cmd "export DEBIAN_FRONTEND=noninteractive"
        cmd "ln -fs /usr/share/zoneinfo/America/Argentina/Buenos_Aires /etc/localtime"
        cmd "apt-get update"
        cmd "apt-get upgrade"
        cmd "apt-get install -y software-properties-common"
        cmd "apt-add-repository -y ppa:ansible/ansible"
        cmd "apt-get install -y tzdata apt-utils"
        cmd "dpkg-reconfigure -f noninteractive tzdata >/dev/null 2>&1"
        cmd "apt-get update"
        cmd "apt-get install -y ansible"
    taskDone
    clearTask
fi

# Gestión del repositorio
if ! [[ -d "$DOTFILESDIR" ]]; then
    task "Cloning repository"
        cmd "git clone --quiet --bare https://github.com/ivanlynch/dotfiles.git $HOME/.dotfiles"
else
    task "Updating repository"
        cmd "git -C $HOME/.dotfiles pull --quiet"
fi

# Función para gestionar dotfiles
function config {
   git --git-dir=$HOME/.dotfiles/.git --work-tree=$HOME $@
}

# Backup y checkout
task "Realizando backup de la configuración existente"
mkdir -p $HOME/.dotfiles-backup

# Identificar archivos que serán sobrescritos y hacer backup
config checkout 2>&1 | grep -E "^\s+\." | awk {'print $1'} | while read file; do
    echo "  Respaldando $file a .dotfiles-backup/"
    # Crear directorios necesarios en el backup
    mkdir -p "$HOME/.dotfiles-backup/$(dirname "$file")"
    # Mover el archivo al backup si existe
    if [ -e "$HOME/$file" ]; then
        cp -R "$HOME/$file" "$HOME/.dotfiles-backup/$file"
    fi
done
taskDone

# Checkout de dotfiles (sobrescribir configuración)
task "Aplicando nueva configuración"
config checkout -f
config config status.showUntrackedFiles no
taskDone

echo -e "${ARROW} ${CYAN}Instalación completa! Tu configuración anterior ha sido respaldada en ~/.dotfiles-backup${NC}"

# vi:ft=sh: