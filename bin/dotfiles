#!/usr/bin/env bash

set -euo pipefail

# Color codes
readonly NC='\033[0m'
readonly GREEN='\033[00;32m'
readonly RED='\033[00;31m'
readonly CYAN='\033[00;36m'

# Constants
readonly DOTFILESLOG="$HOME/.dotfiles.log"
readonly DOTFILESDIR="$HOME/.dotfiles"
readonly BACKUP_DIR="$HOME/.dotfiles-backup"

# Función simple para mostrar mensajes
log() {
    local type="$1"
    local message="$2"
    case $type in
        info) echo -e "${CYAN}▶${NC} ${message}" ;;
        success) echo -e "${GREEN}✔${NC} ${message}" ;;
        error) echo -e "${RED}✖${NC} ${message}" ;;
    esac
}

# Función para gestionar dotfiles
config() {
    git --git-dir="${DOTFILESDIR}/.git" --work-tree="${HOME}" "$@"
}

# Función para realizar backup
backup_file() {
    local file="$1"
    local backup_path="${BACKUP_DIR}/${file}"
    
    if [[ -e "${HOME}/${file}" ]]; then
        mkdir -p "$(dirname "${backup_path}")"
        cp -R "${HOME}/${file}" "${backup_path}"
        return 0
    fi
    return 1
}

# Gestión del repositorio
if ! [[ -d "${DOTFILESDIR}" ]]; then
    log "info" "Clonando repositorio..."
    if ! git clone --quiet --bare git@github.com:ivanlynch/.dotfiles.git "${DOTFILESDIR}"; then
        log "error" "Error al clonar el repositorio"
        exit 1
    fi
    log "success" "Repositorio clonado"
else
    log "info" "Actualizando repositorio..."
    if ! cd "${DOTFILESDIR}"; then
        log "error" "Error al acceder al directorio ${DOTFILESDIR}"
        exit 1
    fi
    
    # Guardar cambios locales si existen
    if ! git diff --quiet || ! git diff --cached --quiet; then
        if ! git stash push -m "dotfiles: cambios locales guardados automáticamente" > /dev/null; then
            log "error" "Error al guardar cambios locales"
            exit 1
        fi
    fi

    # Actualizar repositorio
    if ! git remote update origin > /dev/null; then
        log "error" "Error al actualizar el repositorio remoto"
        exit 1
    fi

    if ! git update-ref refs/heads/main origin/main > /dev/null; then
        log "error" "Error al actualizar la referencia local"
        exit 1
    fi

    # Restaurar cambios locales si existían
    if git stash list | grep -q "dotfiles: cambios locales guardados automáticamente"; then
        if ! git stash pop > /dev/null; then
            log "error" "Error al restaurar cambios locales"
            exit 1
        fi
    fi

    if ! cd - > /dev/null; then
        log "error" "Error al volver al directorio anterior"
        exit 1
    fi
    log "success" "Repositorio actualizado"
fi

# Backup y checkout
log "info" "Realizando backup de la configuración existente..."
if ! mkdir -p "${BACKUP_DIR}"; then
    log "error" "Error al crear directorio de backup"
    exit 1
fi

# Backup de archivos existentes
log "info" "Verificando archivos a respaldar..."
if ! config checkout > /dev/null 2>&1; then
    # Obtener lista de archivos modificados
    files_to_backup=$(config checkout 2>&1 | grep -E "^\s+\." | awk '{print $1}')
    
    if [[ -n "$files_to_backup" ]]; then
        while IFS= read -r file; do
            if backup_file "${file}"; then
                log "info" "Respaldando ${file}"
            fi
        done <<< "$files_to_backup"
    else
        log "info" "No hay archivos para respaldar"
    fi
fi

# Aplicar nueva configuración
log "info" "Aplicando nueva configuración..."
if ! config checkout -f; then
    log "error" "Error al aplicar la configuración"
    exit 1
fi

if ! config config status.showUntrackedFiles no; then
    log "error" "Error al configurar git"
    exit 1
fi

# Verificar directorios esenciales
log "info" "Verificando directorios esenciales..."
for dir in "$HOME/.config" "$HOME/workspaces/clean" "$HOME/ansible/roles/neovim" "$HOME/ansible/roles/zsh"; do
    if ! mkdir -p "$dir"; then
        log "error" "Error al crear directorio $dir"
        exit 1
    fi
done

log "success" "Instalación completa! Tu configuración anterior ha sido respaldada en ${BACKUP_DIR}"