#!/usr/bin/env bash

set -euo pipefail

# Color codes
readonly NC='\033[0m'
readonly GREEN='\033[00;32m'
readonly RED='\033[00;31m'
readonly CYAN='\033[00;36m'

# Constants
readonly DOTFILESLOG="$HOME/.dotfiles.log"
readonly DOTFILESDIR="$HOME/.dotfiles"
readonly BACKUP_DIR="$HOME/.dotfiles-backup"

# Función simple para mostrar mensajes
log() {
    local type="$1"
    local message="$2"
    case $type in
        info) echo -e "${CYAN}▶${NC} ${message}" ;;
        success) echo -e "${GREEN}✔${NC} ${message}" ;;
        error) echo -e "${RED}✖${NC} ${message}" ;;
    esac
}

# Función para gestionar dotfiles
config() {
    git --git-dir="${DOTFILESDIR}" --work-tree="${HOME}" "$@"
}

# Función para realizar backup
backup_file() {
    local file="$1"
    local backup_path="${BACKUP_DIR}/${file}"
    
    if [[ -e "${HOME}/${file}" ]]; then
        mkdir -p "$(dirname "${backup_path}")"
        cp -R "${HOME}/${file}" "${backup_path}"
        return 0
    fi
    return 1
}

# Gestión del repositorio
if ! [[ -d "${DOTFILESDIR}" ]]; then
    log "info" "Clonando repositorio..."
    if ! git clone --quiet --bare https://github.com/ivanlynch/.dotfiles.git "${DOTFILESDIR}"; then
        log "error" "Error al clonar el repositorio"
        exit 1
    fi
    log "success" "Repositorio clonado"
else
    log "info" "Actualizando repositorio..."
    
    # Actualizar repositorio
    if ! git --git-dir="${DOTFILESDIR}" fetch origin > /dev/null; then
        log "error" "Error al actualizar el repositorio remoto"
        exit 1
    fi

    # Obtener el SHA del HEAD remoto
    remote_head=$(git --git-dir="${DOTFILESDIR}" ls-remote origin HEAD | awk '{print $1}')
    if [[ -z "$remote_head" ]]; then
        log "error" "No se pudo obtener la referencia del HEAD remoto"
        exit 1
    fi

    # Actualizar la referencia local
    if ! git --git-dir="${DOTFILESDIR}" update-ref refs/heads/main "$remote_head" > /dev/null; then
        log "error" "Error al actualizar la referencia local"
        exit 1
    fi

    log "success" "Repositorio actualizado"
fi

# Backup y checkout
log "info" "Realizando backup de la configuración existente..."
if ! mkdir -p "${BACKUP_DIR}"; then
    log "error" "Error al crear directorio de backup"
    exit 1
fi

# Backup de archivos existentes
log "info" "Verificando archivos a respaldar..."

# Intentar checkout inicial
if ! config checkout > /dev/null 2>&1; then
    log "info" "Detectados archivos existentes, procediendo con backup..."
    
    # Obtener lista de archivos modificados
    files_to_backup=$(config checkout 2>&1 | grep -E "^\s+\." | awk '{print $1}')
    
    if [[ -n "$files_to_backup" ]]; then
        log "info" "Iniciando backup de archivos..."
        while IFS= read -r file; do
            if backup_file "${file}"; then
                log "info" "Respaldando ${file}"
            fi
        done <<< "$files_to_backup"
    else
        log "info" "No hay archivos para respaldar"
    fi
fi

# Aplicar nueva configuración
log "info" "Aplicando nueva configuración..."
if ! config checkout -f; then
    log "error" "Error al aplicar la configuración"
    exit 1
fi

if ! config config status.showUntrackedFiles no; then
    log "error" "Error al configurar git"
    exit 1
fi

# Verificar directorios esenciales
log "info" "Verificando directorios esenciales..."
for dir in "$HOME/.config" "$HOME/workspaces/clean" "$HOME/ansible/roles/neovim" "$HOME/ansible/roles/zsh"; do
    if ! mkdir -p "$dir"; then
        log "error" "Error al crear directorio $dir"
        exit 1
    fi
done

# Configurar alias en el shell actual
if [[ -f "$HOME/.config/fish/config.fish" ]]; then
    # Asegurarse de que el directorio de funciones de Fish existe
    mkdir -p "$HOME/.config/fish/functions"
    
    # Crear una función temporal para recargar la configuración
    cat > "$HOME/.config/fish/functions/reload_config.fish" << 'EOF'
function reload_config
    source ~/.config/fish/config.fish
end
EOF
    
    # Agregar los alias si no existen
    if ! grep -q "alias dotfiles=" "$HOME/.config/fish/config.fish"; then
        echo 'alias dotfiles="git --git-dir=$HOME/.dotfiles --work-tree=$HOME"' >> "$HOME/.config/fish/config.fish"
    fi
    if ! grep -q "alias dotfiles-pull=" "$HOME/.config/fish/config.fish"; then
        echo 'alias dotfiles-pull="$HOME/bin/dotfiles-sync"' >> "$HOME/.config/fish/config.fish"
    fi
    
    # Recargar la configuración de Fish
    fish -c "source ~/.config/fish/config.fish"
elif [[ -f "$HOME/.zshrc" ]]; then
    if ! grep -q "alias dotfiles=" "$HOME/.zshrc"; then
        echo 'alias dotfiles="git --git-dir=$HOME/.dotfiles --work-tree=$HOME"' >> "$HOME/.zshrc"
    fi
    if ! grep -q "alias dotfiles-pull=" "$HOME/.zshrc"; then
        echo 'alias dotfiles-pull="$HOME/bin/dotfiles-sync"' >> "$HOME/.zshrc"
    fi
    source "$HOME/.zshrc"
fi

log "success" "Instalación completa! Tu configuración anterior ha sido respaldada en ${BACKUP_DIR}"