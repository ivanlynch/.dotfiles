IMAGE_NAME="ivanlynch/alpine-development-environment"
TAG="latest"
CONTAINER_NAME="alpine-dev"

echo "üê≥ Iniciando configuraci√≥n de Alpine Development Environment..."

# Asegurarse de estar en el directorio del script
cd "$(dirname "$0")"
echo "üìÅ Directorio de trabajo: $(pwd)"

# Copiar archivos de configuraci√≥n solo si no existen localmente
echo "‚öôÔ∏è  Preparando archivos de configuraci√≥n..."
rm -rf .config
mkdir -p .config

# Copiar fish config
cp -r "$HOME/.config/fish" .config/
echo "üêü Configuraci√≥n de Fish copiada"

# Copiar neovim config
cp -r "$HOME/.config/nvim" .config/
echo "üìù Configuraci√≥n de Neovim copiada"

# Verificar si el contenedor ya existe
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    echo "üì¶ Contenedor $CONTAINER_NAME ya existe"
   
    # Verificar si est√° corriendo
    if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        echo "üîÑ Contenedor ya est√° corriendo. Conect√°ndose..."
        echo "üí° Para conectar terminales adicionales, usa: docker exec -it $CONTAINER_NAME fish"
        docker exec -it "$CONTAINER_NAME" fish
        exit 0
    else
        echo "üöÄ Iniciando contenedor existente..."
        docker start -ai "$CONTAINER_NAME"
        exit 0
    fi
fi

# Construir la imagen solo si el contenedor no existe
echo "üî® Construyendo imagen Docker..."
docker build \
    --build-arg CACHEBUST=$(date +%s) \
    --build-arg USER_ID=$(id -u) \
    --build-arg GROUP_ID=$(id -g) \
    --build-arg USER_NAME=$(whoami) \
    -t "$IMAGE_NAME:$TAG" .

if [ $? -eq 0 ]; then
    echo "‚úÖ Imagen construida exitosamente"
    
    # Solo hacer push si la construcci√≥n fue exitosa
    echo "üì§ Subiendo imagen a Docker Hub..."
    docker push "$IMAGE_NAME:$TAG"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Imagen subida exitosamente"
    else
        echo "‚ö†Ô∏è  Error subiendo la imagen, pero continuando..."
    fi
else
    echo "‚ùå Error construyendo la imagen"
    exit 1
fi

# Variables para git (opcional, modifica seg√∫n tus necesidades)
echo "üîß Configurando variables de entorno..."
GIT_USER_NAME="$(git config --get user.name)"
GIT_USER_EMAIL="$(git config --get user.email)"

# Directorio de proyecto (puedes modificarlo seg√∫n tus necesidades)
WORKSPACE_DIR="$HOME/workspace"

# Ejecutar el contenedor con nombre v√°lido
echo "üöÄ Iniciando contenedor..."
echo "üí° Para conectar terminales adicionales, usa: docker exec -it $CONTAINER_NAME fish"
docker run -it --rm \
    --name "$CONTAINER_NAME" \
    -p 3000:3000 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e HOST_USER_ID="$(id -u)" \
    -e HOST_GROUP_ID="$(id -g)" \
    -e USER_NAME="$(whoami)" \
    -e GIT_USER_NAME="$GIT_USER_NAME" \
    -e GIT_USER_EMAIL="$GIT_USER_EMAIL" \
    -v "$WORKSPACE_DIR:/home/$(whoami)/workspace" \
    -v "$HOME/.ssh:/home/$(whoami)/.ssh" \
    "$IMAGE_NAME:$TAG"
