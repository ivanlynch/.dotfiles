# ansible/tasks/fish.yml
---
# Las variables target_fish_user, target_fish_user_home y custom_fish_config_src
# se esperan definidas en el playbook que importa este archivo.

- name: Fish | Añadir repositorio de Fish PPA (Debian/Ubuntu)
  ansible.builtin.apt_repository:
    repo: ppa:fish-shell/release-4 # O la versión/PPA que necesites
    state: present
    update_cache: yes
  # 'become: true' heredado del play en bootstrap.yml

- name: Fish | Instalar Fish shell
  ansible.builtin.apt:
    name: fish
    state: present
  # 'become: true' heredado

- name: Fish | Asegurar que fish está en /etc/shells
  ansible.builtin.lineinfile:
    path: /etc/shells
    line: /usr/bin/fish # Verificar con 'which fish' en el target si es diferente
    state: present
    create: yes
  # 'become: true' heredado

- name: Fish | Crear directorio de configuración de Fish principal si no existe
  ansible.builtin.file:
    path: "{{ target_fish_user_home }}/.config/fish" # Ruta completa al directorio de fish
    state: directory # Asegura que es un directorio
    owner: "{{ target_fish_user }}" # Establece el propietario
    group: "{{ target_fish_user }}" # Establece el grupo
    mode: "0755" # Establece los permisos
  # 'become: true' heredado (root crea el dir y setea owner/group)
  # Esta tarea es idempotente: solo crea el directorio si no existe [3].
  # Si ya existe, Ansible se asegura de que los permisos, propietario y grupo sean los especificados.

- name: Starship | Instalar curl si no está presente
  ansible.builtin.apt:
    name: curl
    state: present
  # 'become: true' heredado

# Tarea unificada para descargar y ejecutar el script de instalación de Starship
- name: Starship | Instalar Starship usando el script oficial
  ansible.builtin.shell:
    cmd: "curl -sS https://starship.rs/install.sh | sh -s -- --yes"
    # El 'sh -s -- --yes' es una forma de pasar argumentos al script a través del pipe.
    # El '--yes' (o -y) es para auto-aceptar la instalación (el script de Starship lo soporta [1]).
    executable: /bin/bash # O /bin/sh
  args:
    # Esto ayuda a Ansible a determinar si algo realmente cambió
    # al crear un archivo específico que el script de Starship (generalmente) crea.
    # La ubicación puede variar, pero /usr/local/bin/starship es común.
    creates: /usr/local/bin/starship
  # 'become: true' heredado (el script 'sh' puede invocar 'sudo' si es necesario,
  # o si se ejecuta directamente como root, instalará en el lugar correcto).
  register: starship_install_direct_result
  changed_when: "'Starship installed' in starship_install_direct_result.stdout or starship_install_direct_result.rc != 0" # Ajustar esto según la salida real del script para mejor detección de cambios.                                                                              # O simplemente confiar en 'creates'.

- name: Starship | Mostrar resultado de la instalación directa (debug)
  ansible.builtin.debug:
    var: starship_install_direct_result
  when: starship_install_direct_result is defined

- name: Fish | Copiar configuración de Fish personalizada
  ansible.builtin.copy:
    src: "{{ custom_fish_config_src }}" # Variable definida en bootstrap.yml
    dest: "{{ target_fish_user_home }}/.config/fish/config.fish"
    mode: "0644"
    owner: "{{ target_fish_user }}"
    group: "{{ target_fish_user }}"
  # 'become: true' heredado
  register: fish_copy_result

- name: Fish | Instalar dependencias (curl, git, wget)
  ansible.builtin.apt:
    name:
      - curl
      - git
      - wget
    state: present
  # 'become: true' heredado

- name: Fish | Cambiar shell por defecto a Fish para el usuario {{ target_fish_user }}
  ansible.builtin.user:
    name: "{{ target_fish_user }}"
    shell: /usr/bin/fish # Verificar con 'which fish'
  # 'become: true' heredado
